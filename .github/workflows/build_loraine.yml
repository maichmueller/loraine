name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: RelWithDebInfo

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
    - uses: actions/checkout@v2

    - name: Download CMake
      id: cmake_install
      run: |
        cmake_version="3.17.2"
        os="${{runner.os}}"
        echo "Runner-OS: ${{runner.os}}"
        echo "Using host CMake version: ${cmake_version}"

        if ["${{runner.os}}" -eq "Windows"]
        then
          echo "WINDOWS"
          cmake_suffix="win64-x64.zip"
        elif ["${{runner.os}}" -eq "Linux"]
        then
          echo "LINUX"
          cmake_suffix="Linux-x86_64.tar.gz"
        elif ["${{runner.os}}" -eq "macOS"]
        then
          echo "MAC"
          cmake_suffix="Darwin-x86_64.tar.gz"
        fi
        echo "Downloading CMake."
        cmake_url="https://github.com/Kitware/CMake/releases/download/v${cmake_version}/cmake-${cmake_version}-${cmake_suffix}"
        wget "${cmake_url}" . | tar xvf ./cmake

        export PATH=$PATH:./cmake/bin

        if ("${ { runner.os } }" != "Windows")
            chmod +x ./cmake
        fi()

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Install conan
      shell: bash
      run: |
        python3 -m pip install --upgrade pip setuptools
        python3 -m pip install conan
        source ~/.profile

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source
      # and build directories, but this is only available with CMake 3.13 and higher.
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      #
      # We need to source the profile file to make sure conan is in PATH
      run: |
        source ~/.profile
        cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE